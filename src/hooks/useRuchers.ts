import { useState, useEffect } from 'react';
import { RucherService, Rucher } from '../services/rucherService';

/**
 * Hook personnalis√© pour g√©rer les ruchers de l'utilisateur connect√©
 * Fournit une √©coute en temps r√©el des changements
 */
export const useRuchers = () => {
  const [ruchers, setRuchers] = useState<Rucher[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string>('');

  useEffect(() => {
    let unsubscribe: (() => void) | null = null;

    const setupRealTimeListener = () => {
      try {
        console.log('üêù Configuration de l\'√©coute temps r√©el des ruchers...');
        
        // D√©marrer l'√©coute en temps r√©el
        unsubscribe = RucherService.ecouterRuchersUtilisateurConnecte((ruchersData) => {
          setRuchers(ruchersData);
          setLoading(false);
          setError('');
          console.log(`üêù Mise √† jour temps r√©el: ${ruchersData.length} rucher(s) re√ßu(s)`);
        });

      } catch (err: any) {
        console.error('Erreur lors de la configuration de l\'√©coute:', err);
        setError(err.message || 'Impossible de configurer l\'√©coute des ruchers');
        setLoading(false);
      }
    };

    setupRealTimeListener();

    // Nettoyage lors du d√©montage du composant
    return () => {
      if (unsubscribe) {
        console.log('üêù Arr√™t de l\'√©coute temps r√©el des ruchers');
        unsubscribe();
      }
    };
  }, []);

  /**
   * Recharge manuellement les ruchers (utile apr√®s une action)
   */
  const rechargerRuchers = async () => {
    try {
      setLoading(true);
      setError('');
      const ruchersData = await RucherService.obtenirRuchersUtilisateurConnecte();
      setRuchers(ruchersData);
      console.log(`üêù Rechargement manuel: ${ruchersData.length} rucher(s) r√©cup√©r√©(s)`);
    } catch (err: any) {
      console.error('Erreur lors du rechargement:', err);
      setError(err.message || 'Impossible de recharger les ruchers');
    } finally {
      setLoading(false);
    }
  };

  /**
   * Ajoute un nouveau rucher
   */
  const ajouterRucher = async (rucher: Omit<Rucher, 'id' | 'dateCreation' | 'nombreRuches' | 'actif' | 'idApiculteur'>) => {
    try {
      setError('');
      const id = await RucherService.ajouterRucherUtilisateurConnecte(rucher);
      console.log('üêù Rucher ajout√© avec succ√®s, ID:', id);
      // Pas besoin de recharger, l'√©coute temps r√©el se chargera de la mise √† jour
      return id;
    } catch (err: any) {
      console.error('Erreur lors de l\'ajout:', err);
      setError(err.message || 'Impossible d\'ajouter le rucher');
      throw err;
    }
  };

  /**
   * Supprime un rucher
   */
  const supprimerRucher = async (id: string) => {
    try {
      setError('');
      await RucherService.supprimerRucher(id);
      console.log('üêù Rucher supprim√© avec succ√®s, ID:', id);
      // Pas besoin de recharger, l'√©coute temps r√©el se chargera de la mise √† jour
    } catch (err: any) {
      console.error('Erreur lors de la suppression:', err);
      setError(err.message || 'Impossible de supprimer le rucher');
      throw err;
    }
  };

  /**
   * Met √† jour un rucher
   */
  const mettreAJourRucher = async (id: string, rucher: Partial<Rucher>) => {
    try {
      setError('');
      await RucherService.mettreAJourRucher(id, rucher);
      console.log('üêù Rucher mis √† jour avec succ√®s, ID:', id);
      // Pas besoin de recharger, l'√©coute temps r√©el se chargera de la mise √† jour
    } catch (err: any) {
      console.error('Erreur lors de la mise √† jour:', err);
      setError(err.message || 'Impossible de mettre √† jour le rucher');
      throw err;
    }
  };

  return {
    ruchers,
    loading,
    error,
    rechargerRuchers,
    ajouterRucher,
    supprimerRucher,
    mettreAJourRucher,
    clearError: () => setError('')
  };
}; 