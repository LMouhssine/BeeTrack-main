name: BeeTrack CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/beetrack

jobs:
  # Tests et validation du code
  test:
    name: Tests et Qualité
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: |
        cd ruche-connectee/web-app
        mvn clean test

    - name: Run code analysis with SonarCloud (optionnel)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        cd ruche-connectee/web-app
        mvn sonar:sonar \
          -Dsonar.projectKey=lmouhssine_beetrack \
          -Dsonar.organization=lmouhssine \
          -Dsonar.host.url=https://sonarcloud.io
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ruche-connectee/web-app/target/surefire-reports/

  # Build et packaging
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build application
      run: |
        cd ruche-connectee/web-app
        mvn clean package -DskipTests

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: ruche-connectee/web-app/target/*.jar

  # Build et push de l'image Docker
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./ruche-connectee/web-app
        file: ./ruche-connectee/web-app/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # Déploiement (optionnel - à adapter selon votre infrastructure)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Déploiement vers staging avec l'image: ${{ needs.docker.outputs.image }}"
        # Ici vous pouvez ajouter vos scripts de déploiement
        # Exemples : kubectl, docker-compose, Ansible, etc.

    - name: Run smoke tests
      run: |
        echo "Exécution des tests de fumée..."
        # Tests basiques pour vérifier que l'application répond
        # curl -f http://staging.beetrackapp.com/actuator/health || exit 1

  # Notification (optionnel)
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [test, build, docker, deploy]
    if: always()

    steps:
    - name: Notify success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Déploiement réussi!"
        # Ici vous pouvez ajouter des notifications Slack, Discord, email, etc.

    - name: Notify failure
      if: failure()
      run: |
        echo "❌ Échec du pipeline!"
        # Notification en cas d'échec